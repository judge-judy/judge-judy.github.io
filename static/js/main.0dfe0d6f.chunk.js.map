{"version":3,"sources":["data/CourtCase.tsx","components/CaseCard.tsx","data/CaseDetails.tsx","CasePage.tsx","components/SearchBar.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","colorForCategory","cat","Desegregation","CivilRights","Abortion","Elections","categoryFromId","id","CourtCase","docketNumber","title","categories","date","detailsURL","description","plaintiff","defendant","category","splitTitle","this","indexOf","Error","split","stripHtml","html","tmp","document","createElement","innerHTML","textContent","innerText","formatDate","d","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","getBadge","c","className","Badge","color","CaseSummaryCard","courtCase","outline","outlineProps","Card","body","CardTitle","tag","CardText","to","Judge","name","thumbnailURL","voted","imageClass","key","alt","src","UncontrolledTooltip","target","placement","Decision","winningParty","majorityVote","minorityVote","CaseDetails","factsOfTheCase","conclusion","date_granted","date_argued","date_decided","decision","judges","parseCaseDetails","api_blob","timeline","timelineEvent","event","Date","dates","decisions","length","winning_party","majority_vote","minority_vote","votes","map","j","member","identifier","thumbnail","href","vote","heard_by","members","facts_of_the_case","CasePage","props","state","isLoaded","fetch","then","res","json","setState","caseDetails","error","dateDescriptionList","label","categoryBadge","Container","fluid","Row","Col","sm","md","size","offset","Jumbotron","renderPicture","dangerouslySetInnerHTML","__html","Spinner","Navbar","light","expand","NavbarBrand","Nav","navbar","Form","inline","InputGroup","Input","type","placeholder","InputGroupAddon","addonType","InputGroupText","icon","Search","verticalAlign","React","Component","AutoComplete","connectAutoComplete","hits","currentRefinement","refine","Configure","hitsPerPage","suggestions","onSuggestionsFetchRequested","value","onSuggestionsClearRequested","getSuggestionValue","hit","renderSuggestion","Highlight","attribute","inputProps","onChange","renderInputComponent","cases","case_summaries","caseObject","question","details_url","push","docket_number","sort","c1","c2","getTime","reverse","getCases","casesById","Map","forEach","set","newCases","HomePage","SearchBar","slice","CasePageRouter","docketId","useParams","get","CategoryExpander","uniqueID","replace","getCategoryDescription","getCasesForCategory","CardBody","Button","UncontrolledCollapse","toggler","searchClient","algoliasearch","App","InstantSearch","indexName","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0dfe0d6f.chunk.js","sourcesContent":["import case_summaries from './case_summaries.json';\n\nexport enum Category {\n  Desegregation = \"Desegregation\",\n  CivilRights = \"Civil Rights\",\n  Abortion = \"Abortion\",\n  Elections = \"Elections\"\n}\n\nexport function colorForCategory(cat: Category): string {\n  switch (cat) {\n    case Category.Desegregation:\n      return \"warning\";\n    case Category.CivilRights:\n      return \"secondary\";\n    case Category.Abortion:\n      return \"primary\";\n    case Category.Elections:\n      return \"danger\";\n  }\n}\n\nfunction categoryFromId(id: number): Category | null {\n  switch (id) {\n    case 159:\n      return Category.Desegregation;\n    case 154:\n      return Category.CivilRights;\n    case 423:\n      return Category.Abortion;\n    case 335:\n      return Category.Elections;\n    default:\n      return null;\n  }\n}\n\nexport default class CourtCase {\n  readonly plaintiff: string;\n  readonly defendant: string;\n  readonly category: Category | null;\n\n  constructor(readonly docketNumber: string,\n    title: string,\n    categories: number[],\n    readonly date: Date,\n    readonly detailsURL: string,\n    readonly description: string) {\n    const { plaintiff, defendant } = splitTitle(title);\n    this.plaintiff = plaintiff;\n    this.defendant = defendant;\n\n    this.category = null;\n    for (const category of categories) {\n      if (categoryFromId(category)) {\n        this.category = categoryFromId(category);\n      }\n    }\n    // some \"safe\" fallbacks\n    if (this.category == null) {\n      if (description.indexOf(\"abortion\") !== -1) {\n        this.category = Category.Abortion;\n      }\n    }\n  }\n}\n\nexport function splitTitle(title: string): { plaintiff: string, defendant: string } {\n  if (title.indexOf(\" v. \") === -1) {\n    throw Error(\"Invalid title: \" + title);\n  }\n  const [plaintiff, defendant] = title.split(\" v. \");\n  return { plaintiff, defendant };\n}\n\nexport function getCases(): CourtCase[] {\n  const cases = [];\n\n  for (const caseObject of case_summaries) {\n    if (!caseObject.description && caseObject.question) {\n      caseObject.description = stripHtml(caseObject.question);\n    }\n    if (!caseObject.title || !caseObject.date || !caseObject.details_url || !caseObject.description) {\n      continue;\n    }\n    if (caseObject.title.indexOf(\" v. \") === -1) {\n      continue;\n    }\n    cases.push(new CourtCase(\n      caseObject.docket_number, caseObject.title,\n      caseObject.categories,\n      new Date(caseObject.date),\n      caseObject.details_url, caseObject.description\n    ));\n  }\n\n  cases.sort((c1, c2) => c1.date.getTime() - c2.date.getTime());\n  cases.reverse();\n\n  return cases;\n}\n\n// Quick little utility function to just get text from known safe HTML blobs\nfunction stripHtml(html: string) : string {\n   var tmp = document.createElement(\"div\");\n   tmp.innerHTML = html;\n   return tmp.textContent || tmp.innerText || \"\";\n}\n","import React, { FunctionComponent } from 'react';\nimport { Card, CardTitle, CardText, Badge } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\nimport CourtCase, { Category, colorForCategory } from '../data/CourtCase';\n\ntype CaseSummaryProps = {\n  courtCase: CourtCase,\n  outline?: string\n}\n\nexport const formatDate = (d: Date) => {\n  const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d)\n  const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d)\n  const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d)\n\n  return `${da} ${mo}, ${ye}`;\n}\n\nexport const getBadge = (c: Category | null, className = '') => {\n  if (c == null) {\n    return <></>;\n  }\n  return <Badge className={className} color={colorForCategory(c)}>{c}</Badge>;\n}\n\nconst CaseSummaryCard: FunctionComponent<CaseSummaryProps> = ({ courtCase, outline }: CaseSummaryProps) => {\n  const { plaintiff, defendant, date, description, docketNumber } = courtCase;\n\n  let outlineProps = {};\n  if (outline) {\n    outlineProps = {'outline': true, 'color': outline};\n  }\n\n  return <Card className=\"my-2\" body {...outlineProps}>\n    <CardTitle tag=\"h5\">\n      {plaintiff} <span className=\"font-weight-bold font-italic\">v.</span> {defendant}\n    </CardTitle>\n    <div className=\"clearfix mb-3\">\n      <span className=\"text-muted\">{formatDate(date)}</span>\n      {getBadge(courtCase.category, \"float-right\")}\n    </div>\n    <CardText>\n      {description}\n    </CardText>\n    <Link to={`/cases/${docketNumber}`}>Read More...</Link>\n  </Card>;\n}\n\nexport default CaseSummaryCard;\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { splitTitle } from './CourtCase';\n\n\nexport class Judge {\n  constructor(\n    readonly id: string,\n    readonly name: string,\n    readonly thumbnailURL: string,\n    readonly voted: 'majority' | 'minority' | 'not-voted-yet',\n  ) { }\n\n  public renderPicture(key = '') {\n    let imageClass = 'judge-image rounded-circle border';\n    if (this.voted === 'majority') {\n      imageClass += ' border-success';\n    } else if (this.voted === 'minority') {\n      imageClass += ' border-danger';\n    }\n    return <div key={this.id}>\n      <img alt={`Justice ${this.name}`} id={this.id}\n        src={this.thumbnailURL} className={imageClass} />\n      <UncontrolledTooltip target={this.id} placement=\"top\" >\n        {this.name}\n      </UncontrolledTooltip>\n    </div>;\n  }\n}\n\nexport class Decision {\n  constructor(\n    readonly winningParty: string,\n    readonly majorityVote: number,\n    readonly minorityVote: number\n  ) { }\n}\n\nexport default class CaseDetails {\n  constructor(\n    readonly plaintiff: string,\n    readonly defendant: string,\n    readonly factsOfTheCase: string,\n    readonly conclusion: string | null,\n    readonly date_granted: Date | null,\n    readonly date_argued: Date | null,\n    readonly date_decided: Date | null,\n    readonly decision: Decision | null,\n    readonly judges: Judge[]\n  ) { }\n}\n\nexport function parseCaseDetails(api_blob: any): CaseDetails {\n  const { plaintiff, defendant } = splitTitle(api_blob.name);\n  let date_granted = null;\n  let date_argued = null;\n  let date_decided = null;\n  for (const timelineEvent of api_blob.timeline) {\n    switch (timelineEvent.event) {\n      case \"Granted\":\n        date_granted = new Date(timelineEvent.dates[0] * 1000);\n        break;\n      case \"Argued\":\n        date_argued = new Date(timelineEvent.dates[0] * 1000);\n        break;\n      case \"Decided\":\n        date_decided = new Date(timelineEvent.dates[0] * 1000);\n        break;\n    }\n  }\n\n  let decision = null;\n  let judges = [];\n  if (api_blob.decisions && api_blob.decisions.length >= 1) {\n    const d = api_blob.decisions[api_blob.decisions.length - 1];\n\n    decision = new Decision(d.winning_party, d.majority_vote, d.minority_vote);\n    judges = d.votes.map(\n      (j: any) => new Judge(j.member.identifier, j.member.name, j.member.thumbnail.href, j.vote)\n    );\n  }\n\n  if (api_blob.heard_by[0] && api_blob.heard_by[0].members && judges.length === 0) {\n    judges = api_blob.heard_by[0].members.map(\n      (j: any) => new Judge(j.identifier, j.name, j.thumbnail.href, \"not-voted-yet\")\n    );\n  }\n\n  return new CaseDetails(\n    plaintiff, defendant, api_blob.facts_of_the_case ? api_blob.facts_of_the_case : '',\n    api_blob.conclusion ? api_blob.conclusion : null,\n    date_granted, date_argued, date_decided,\n    decision,\n    judges\n  );\n}\n","import React from 'react';\nimport {\n  Container, Row, Col, Jumbotron,\n  Navbar, NavbarBrand, Nav,\n  Spinner,\n  Form, Input, InputGroup, InputGroupAddon, InputGroupText\n} from \"reactstrap\";\nimport Octicon, { Search } from '@primer/octicons-react';\n\nimport { formatDate, getBadge } from './components/CaseCard';\nimport CaseDetails, { parseCaseDetails } from './data/CaseDetails';\nimport CourtCase from './data/CourtCase';\n\ntype CasePageProps = {\n  courtCase: CourtCase\n}\n\ntype CasePageState =\n  | { isLoaded: false }\n  | { isLoaded: true, error: object }\n  | { isLoaded: true, error: null, caseDetails: CaseDetails };\n\nexport default class CasePage extends React.Component<CasePageProps, CasePageState> {\n  constructor(props: CasePageProps) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n    };\n  }\n\n  componentDidMount() {\n    fetch(this.props.courtCase.detailsURL)\n      .then(res => res.json())\n      .then(\n        res => {\n          this.setState({ isLoaded: true, caseDetails: parseCaseDetails(res) });\n        },\n        error => {\n          this.setState({ isLoaded: true, error });\n        }\n      );\n  }\n\n  render() {\n    let body;\n    if (!this.state.isLoaded) {\n      body = <Spinner></Spinner>;\n    }\n    else if (this.state.error) {\n      body = <p>Error? {this.state.error}</p>;\n    }\n    else {\n      const dateDescriptionList = (label: string, date: any): JSX.Element => date ?\n        <>\n          <dt className=\"col-sm-3\">{label}</dt>\n          <dd className=\"col-sm-9\">{formatDate(date)}</dd>\n        </> : <></>;\n\n      const { category } = this.props.courtCase;\n      const categoryBadge = category ? <>\n        <dd className=\"col-sm-12\">{getBadge(category)}</dd>\n      </> : <></>;\n\n      const { plaintiff, defendant, date_granted,\n        date_argued, date_decided, decision, judges, conclusion } = this.state.caseDetails;\n\n      body = <>\n        <Container className=\"text-light bg-dark pt-4\" fluid>\n          <Container>\n            <Row className=\"justify-content-center\">\n              <h1 className=\"font-weight-bold\">\n                {plaintiff} <span className=\"font-weight-light font-italic text-muted\">v.</span> {defendant}\n              </h1>\n            </Row>\n            <Row className=\"mt-4\">\n              <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\n                <Jumbotron className=\"text-dark\">\n                  <dl className=\"row\">\n                    {categoryBadge}\n                    {dateDescriptionList('Date Accepted', date_granted)}\n                    {dateDescriptionList('Argued in Court', date_argued)}\n                    {date_decided ?\n                      <dd className=\"col-sm-12\">\n                        <p className=\"text-lead\">\n                          Decided on <span className=\"font-italic\">{date_decided ? formatDate(date_decided) : ''}</span>\n                          {decision\n                            ? <>\n                              {' '}in favor of <span className=\"font-weight-bold\">{decision.winningParty}</span> with a\n                            {' '}{decision.majorityVote}-{decision.minorityVote}\n                            </>\n                            : ''}.\n                        </p>\n                      </dd>\n                      : ''}\n                  </dl>\n                  <hr className=\"my-4\" />\n                  <Row className=\"text-center justify-content-center\">\n                    {judges.map(j => j.renderPicture())}\n                  </Row>\n                </Jumbotron>\n              </Col>\n            </Row>\n          </Container>\n        </Container>\n        <Container className=\"text-dark bg-light pt-4\" fluid>\n          <Container>\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\n              <Row className=\"justify-content-center\">\n                <h2 className=\"font-weight-bold\">\n                  Issue under Consideration</h2>\n              </Row>\n              <Row dangerouslySetInnerHTML={{ __html: this.state.caseDetails.factsOfTheCase }}>\n              </Row>\n              {conclusion ?\n                <>\n                  <Row className=\"justify-content-center\">\n                    <h2 className=\"font-weight-bold\">\n                      Conclusion</h2>\n                  </Row>\n                  <Row dangerouslySetInnerHTML={{ __html: conclusion }}></Row>\n                </> : <></>\n              }\n            </Col>\n          </Container>\n        </Container>\n      </>;\n    }\n\n\n    return <>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"#\">\n          <h4 className=\"display-4\">\n            Judge Judy\n                    </h4>\n        </NavbarBrand>\n        <Nav className=\"mr-auto\" navbar></Nav>\n        <Form inline>\n          <InputGroup>\n            <Input className=\"form-control\" type=\"search\" name=\"search\" id=\"searchQuery\" placeholder=\"Search for case...\" />\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText>\n                <Octicon icon={Search} verticalAlign='middle' size='small'></Octicon>\n              </InputGroupText>\n            </InputGroupAddon>\n          </InputGroup>\n        </Form>\n      </Navbar>\n\n      {body}\n    </>;\n  }\n}\n","import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {\n  Highlight,\n  Configure,\n  connectAutoComplete,\n} from 'react-instantsearch-dom';\nimport {\n  InputGroup, Input, InputGroupAddon, InputGroupText\n} from 'reactstrap';\nimport Octicon, { Search } from '@primer/octicons-react';\n\nconst AutoComplete = connectAutoComplete(\n  ({ hits, currentRefinement, refine }) => (\n    <>\n    <Configure hitsPerPage={5} />\n    <Autosuggest\n      suggestions={hits}\n      onSuggestionsFetchRequested={({ value }) => refine(value)}\n      onSuggestionsClearRequested={() => refine('')}\n      getSuggestionValue={hit => hit.name}\n      renderSuggestion={hit =>\n        <>\n          <span>{ hit.title }</span>\n          <Highlight hit={hit} attribute=\"description\" />\n        </>\n      }\n      inputProps={{\n        placeholder: 'Search for case...',\n        value: currentRefinement,\n        onChange: () => {},\n      }}\n      renderInputComponent={inputProps => (\n        <InputGroup className=\"w-100\" size=\"md\">\n        <Input {...inputProps} className=\"form-control\" type=\"search\" name=\"search\" id=\"searchQuery\" placeholder=\"Search for case...\" />\n        <InputGroupAddon addonType=\"append\">\n          <InputGroupText>\n            <Octicon icon={Search} verticalAlign='middle' size='small'></Octicon>\n          </InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>)\n      }\n    />\n    </>\n  )\n);\n\nexport default AutoComplete;\n","import React, { FunctionComponent } from 'react';\nimport {\n  HashRouter as Router,\n  Switch, Route, useParams\n} from \"react-router-dom\";\nimport {\n  Container, Row, Col,\n  Button, Form,\n  Card, CardBody, CardTitle, CardText,\n  UncontrolledCollapse\n} from \"reactstrap\";\nimport algoliasearch from 'algoliasearch/lite';\nimport { InstantSearch } from 'react-instantsearch-dom';\n\nimport CourtCase, { getCases, colorForCategory, Category } from './data/CourtCase';\nimport CasePage from './CasePage';\nimport SearchBar from './components/SearchBar';\nimport CaseSummaryCard from './components/CaseCard';\nimport './App.css';\n\n\nconst cases = getCases();\n// A map with docket ids -> cases\nconst casesById = new Map();\ncases.forEach(c => casesById.set(c.docketNumber, c));\n// A little hacky but for now, since the summaries don't contain the date\n// argued we just use a > certain_date filter.\nconst newCases = cases;\n//const newCases = cases.filter(c => c.date > new Date('November 1, 2019 00:00:00'))\n\n\nclass HomePage extends React.Component<{}, {}> {\n  render() {\n    return <>\n      <Container id=\"header\" className=\"bg-light text-center py-5\" fluid>\n        <h1 className=\"display-1\">\n          Judge Judy\n        </h1>\n        <p className=\"text-muted lead\">The Supreme Court made accessible.</p>\n      </Container>\n\n      <Container id=\"home-search\" className=\"bg-dark text-center text-light py-3\" fluid>\n        <p className=\"lead\">\n          Search by issues, judges, parties, etc.\n        </p>\n        <Container>\n          <Row>\n            <Col sm=\"12\" md={{ size: 4, offset: 4 }}>\n              <Form className=\"justify-content-center\" inline>\n                <SearchBar />\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n\n      <Container>\n        <Row className=\"mt-3\">\n          <Col md=\"6\">\n            <h2>Cases awaiting Arguments</h2>\n            {\n              newCases.slice(0, 5).map(c => <CaseSummaryCard key={c.docketNumber} courtCase={c} />)\n            }\n          </Col>\n          <Col md=\"6\">\n            <h2>Cases by Topic</h2>\n            <CategoryExpander category={Category.Desegregation}></CategoryExpander>\n            <CategoryExpander category={Category.CivilRights}></CategoryExpander>\n            <CategoryExpander category={Category.Abortion}></CategoryExpander>\n            <CategoryExpander category={Category.Elections}></CategoryExpander>\n          </Col>\n        </Row>\n      </Container>\n    </>;\n  }\n}\n\nfunction CasePageRouter() {\n  const { docketId } = useParams();\n  return <CasePage courtCase={casesById.get(docketId)} />\n}\n\nconst getCategoryDescription = (category: Category) => {\n  switch (category) {\n    case Category.Desegregation:\n      return `The U.S has had a long history of discrimination in terms of both races\n        and gender. These are some of the landmark cases that track the\n        legal issues around this topic.`;\n    case Category.CivilRights:\n      return `The bill of rights covers are a rich set of inalienable rights provided\n        to people in America. These cases revolve around the limitations and\n        enforcement of these rights.`;\n    case Category.Abortion:\n      return `Abortion has been a hotly contested issue within America. With wide laws\n        criminimalizing it in the 1800s and 1900s, steps towards and away from\n        the right to abortion have been made.`;\n    case Category.Elections:\n      return `Elections are a core part of our democracy. The laws that govern\n        campaigns, election spending, term limits are explored in these themed\n        cases.`;\n  }\n}\n\nconst getCasesForCategory = (category: Category): CourtCase[] => {\n  switch (category) {\n    case Category.Desegregation:\n      return ['163us537', '347us483', '84-6263'].map(id => casesById.get(id));\n    case Category.CivilRights:\n      return ['492', '88-155', '94-329'].map(id => casesById.get(id));\n    case Category.Abortion:\n      return ['70-18', '99-830', '15-274'].map(id => casesById.get(id));\n    case Category.Elections:\n      return ['75-436', '08-205'].map(id => casesById.get(id));\n  }\n}\n\ntype CategoryExpanderProps = { category: Category }\nconst CategoryExpander: FunctionComponent<CategoryExpanderProps> = ({ category }: CategoryExpanderProps) => {\n  const uniqueID = `view-${category.replace(' ', '-')}`;\n  \n  const description = getCategoryDescription(category);\n  const cases = getCasesForCategory(category);\n\n  return <>\n    <Card className=\"mt-4\" outline color={colorForCategory(category)}>\n      <CardBody>\n        <CardTitle tag=\"h5\">{category}</CardTitle>\n        <CardText>{description}</CardText>\n        <Button id={uniqueID}>View Cases</Button>\n      </CardBody>\n    </Card>\n    <UncontrolledCollapse toggler={`#${uniqueID}`}>\n      { cases.map(c => <CaseSummaryCard key={c.docketNumber} outline={colorForCategory(category)} courtCase={c} />) }\n    </UncontrolledCollapse>\n  </>;\n}\n\nconst searchClient = algoliasearch(\n  '79H8GR8U9A',\n  '1b2d0670ff0df398224e31d9b0ab97de'\n);\n\n// {} types for both props and state so far...\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <InstantSearch indexName=\"judge_judy\" searchClient={searchClient}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <HomePage />\n            </Route>\n            <Route path=\"/cases/:docketId\">\n              <CasePageRouter />\n            </Route>\n          </Switch>\n        </Router>\n      </InstantSearch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
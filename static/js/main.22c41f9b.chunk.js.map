{"version":3,"sources":["data/CourtCase.tsx","data/CaseDetails.tsx","components/CaseCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CourtCase","docketNumber","title","date","detailsURL","description","plaintiff","defendant","splitTitle","this","indexOf","Error","split","Judge","id","name","thumbnailURL","voted","imageClass","key","alt","src","className","UncontrolledTooltip","target","placement","Decision","winningParty","majorityVote","minorityVote","CaseDetails","factsOfTheCase","date_granted","date_argued","date_decided","decision","judges","parseCaseDetails","api_blob","timeline","timelineEvent","event","Date","dates","decisions","length","d","winning_party","majority_vote","minority_vote","votes","map","j","member","identifier","thumbnail","href","vote","heard_by","members","facts_of_the_case","formatDate","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","CaseSummaryCard","courtCase","Card","body","CardTitle","tag","Badge","color","CardText","to","cases","case_summaries","caseObject","details_url","push","docket_number","sort","c1","c2","getTime","reverse","getCases","casesById","Map","forEach","c","set","newCases","HomePage","Container","fluid","Row","Col","sm","md","size","offset","Form","inline","InputGroup","Input","type","placeholder","InputGroupAddon","addonType","InputGroupText","icon","Search","verticalAlign","slice","React","Component","CasePage","props","state","isLoaded","fetch","then","res","json","setState","caseDetails","error","dateDescriptionList","label","Jumbotron","renderPicture","dangerouslySetInnerHTML","__html","Spinner","Navbar","light","expand","NavbarBrand","Nav","navbar","CasePageRouter","docketId","useParams","get","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.22c41f9b.chunk.js","sourcesContent":["import case_summaries from './case_summaries.json';\n\nexport default class CourtCase {\n    readonly plaintiff: string;\n    readonly defendant: string;\n\n    constructor(readonly docketNumber: string,\n                title: string,\n                readonly date: Date,\n                readonly detailsURL: string,\n                readonly description: string) {\n        const { plaintiff, defendant } = splitTitle(title);\n        this.plaintiff = plaintiff;\n        this.defendant = defendant;\n    }\n}\n\nexport function splitTitle(title: string) : {plaintiff: string, defendant: string} {\n    if (title.indexOf(\" v. \") === -1) {\n        throw Error(\"Invalid title: \" + title);\n    }\n    const [plaintiff, defendant] = title.split(\" v. \");\n    return { plaintiff, defendant };\n}\n\nexport function getCases() : CourtCase[] {\n    const cases = [];\n\n    for (const caseObject of case_summaries) {\n        if (!caseObject.title || !caseObject.date || !caseObject.details_url || !caseObject.description) {\n            continue;\n        }\n        if (caseObject.title.indexOf(\" v. \") === -1) {\n            continue;\n        }\n        cases.push(new CourtCase(\n            caseObject.docket_number, caseObject.title, \n            new Date(caseObject.date), \n            caseObject.details_url, caseObject.description\n        ));\n    }\n\n    cases.sort((c1, c2) => c1.date.getTime() - c2.date.getTime());\n    cases.reverse();\n\n    return cases;\n}\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { splitTitle } from './CourtCase';\n\n\nexport class Judge {\n    constructor(\n        readonly id: string,\n        readonly name: string,\n        readonly thumbnailURL: string,\n        readonly voted: 'majority' | 'minority' | 'not-voted-yet',\n    ) {}\n\n    public renderPicture(key='') {\n        let imageClass = 'judge-image rounded-circle border';\n        if (this.voted === 'majority') {\n            imageClass += ' border-success';\n        } else if (this.voted === 'minority') {\n            imageClass += ' border-danger';\n        }\n        return <div key={this.id}>\n            <img alt={`Justice ${this.name}`} id={ this.id } \n                 src={ this.thumbnailURL } className={ imageClass } />\n            <UncontrolledTooltip target={ this.id } placement=\"top\" >\n                { this.name }\n            </UncontrolledTooltip>\n        </div>;\n    }\n}\n\nexport class Decision {\n    constructor(\n        readonly winningParty: string,\n        readonly majorityVote: number,\n        readonly minorityVote: number\n    ) {}\n}\n\nexport default class CaseDetails {\n    constructor(\n        readonly plaintiff: string,\n        readonly defendant: string,\n        readonly factsOfTheCase: string,\n        readonly date_granted: Date | null,\n        readonly date_argued: Date | null,\n        readonly date_decided: Date | null,\n        readonly decision: Decision | null,\n        readonly judges: Judge[]\n    ) {}\n}\n\nexport function parseCaseDetails(api_blob: any) : CaseDetails {\n    const { plaintiff, defendant } = splitTitle(api_blob.name);\n    let date_granted = null;\n    let date_argued = null;\n    let date_decided = null;\n    for (const timelineEvent of api_blob.timeline) {\n      switch (timelineEvent.event) {\n        case \"Granted\":\n          date_granted = new Date(timelineEvent.dates[0] * 1000);\n          break;\n        case \"Argued\":\n          date_argued = new Date(timelineEvent.dates[0] * 1000);\n          break;\n        case \"Decided\":\n          date_decided = new Date(timelineEvent.dates[0] * 1000);\n          break;\n      }\n    }\n\n    let decision = null;\n    let judges = [];\n    if (api_blob.decisions && api_blob.decisions.length >= 1) {\n        const d = api_blob.decisions[api_blob.decisions.length - 1];\n\n        decision = new Decision(d.winning_party, d.majority_vote, d.minority_vote);\n        judges = d.votes.map(\n            (j : any) => new Judge(j.member.identifier, j.member.name, j.member.thumbnail.href, j.vote)\n        );\n    }\n\n    if (api_blob.heard_by[0] && api_blob.heard_by[0].members && judges.length === 0) {\n        judges = api_blob.heard_by[0].members.map(\n            (j: any) => new Judge(j.identifier, j.name, j.thumbnail.href, \"not-voted-yet\")\n        );\n    }\n\n    return new CaseDetails(\n        plaintiff, defendant, api_blob.facts_of_the_case ? api_blob.facts_of_the_case : '',\n        date_granted, date_argued, date_decided,\n        decision,\n        judges\n    );\n}\n","import React, { FunctionComponent } from 'react';\nimport { Card, CardTitle, CardText, Badge } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\nimport CourtCase from '../data/CourtCase';\n\ntype CaseSummaryProps = {\n    courtCase: CourtCase\n}\n\nexport const formatDate = (d: Date) => {\n    const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d)\n    const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d)\n    const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d)\n    \n    return `${da} ${mo}, ${ye}`;\n}\n\nconst CaseSummaryCard: FunctionComponent<CaseSummaryProps> = ({courtCase} : CaseSummaryProps) => {\n    const {plaintiff, defendant, date, description, docketNumber} = courtCase;\n\n    return <Card className=\"my-2\" body>\n        <CardTitle tag=\"h5\">\n            { plaintiff } <span className=\"font-weight-bold font-italic\">v.</span> { defendant }\n        </CardTitle>\n        <div className=\"clearfix mb-3\">\n            <span className=\"text-muted\">{ formatDate(date) }</span>\n            <Badge className=\"float-right\" color=\"secondary\">Civil Rights</Badge>\n        </div>\n        <CardText>\n            { description }\n        </CardText>\n        <Link to={`/cases/${docketNumber}`}>Read More...</Link>\n    </Card>;\n}\n\nexport default CaseSummaryCard;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch, Route, useParams\n} from \"react-router-dom\";\nimport {\n  Container, Row, Col, Jumbotron,\n  Form, Input, InputGroup, InputGroupAddon, InputGroupText,\n  Navbar, NavbarBrand,\n  Spinner,\n  Nav\n} from \"reactstrap\";\nimport Octicon, { Search } from '@primer/octicons-react';\n\nimport CaseDetails, { parseCaseDetails } from './data/CaseDetails';\nimport CourtCase, { getCases } from './data/CourtCase';\nimport CaseSummaryCard, { formatDate } from './components/CaseCard';\nimport './App.css';\n\n\nconst cases = getCases();\n// A map with docket ids -> cases\nconst casesById = new Map();\ncases.forEach(c => casesById.set(c.docketNumber, c));\n// A little hacky but for now, since the summaries don't contain the date\n// argued we just use a > certain_date filter.\nconst newCases = cases;\n//const newCases = cases.filter(c => c.date > new Date('November 1, 2019 00:00:00'))\n\n\nclass HomePage extends React.Component<{}, {}> {\n  render() {\n    return <>\n      <Container id=\"header\" className=\"bg-light text-center py-5\" fluid>\n        <h1 className=\"display-1\">\n          Judge Judy\n        </h1>\n        <p className=\"text-muted lead\">The Supreme Court made accessible.</p>\n      </Container>\n\n      <Container id=\"home-search\" className=\"bg-dark text-center text-light py-3\" fluid>\n        <p className=\"lead\">\n          Search by issues, judges, parties, etc.\n        </p>\n        <Container>\n          <Row>\n            <Col sm=\"12\" md={{ size: 4, offset: 4 }}>\n              <Form className=\"justify-content-center\" inline>\n                <InputGroup className=\"w-100\" size=\"md\">\n                  <Input className=\"form-control\" type=\"search\" name=\"search\" id=\"searchQuery\" placeholder=\"Search for case...\" />\n                  <InputGroupAddon addonType=\"append\">\n                    <InputGroupText>\n                      <Octicon icon={Search} verticalAlign='middle' size='small'></Octicon>\n                    </InputGroupText>\n                  </InputGroupAddon>\n                </InputGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n\n      <Container>\n        <Row className=\"mt-3\">\n          <Col md=\"6\">\n            <h2>Cases awaiting Arguments</h2>\n            {\n              newCases.slice(0, 5).map(c => <CaseSummaryCard key={c.docketNumber} courtCase={c} />)\n            }\n          </Col>\n          <Col md=\"6\">\n            <h2>Cases by Topic</h2>\n          </Col>\n        </Row>\n      </Container>\n    </>;\n  }\n}\n\ntype CasePageProps = {\n  courtCase: CourtCase\n}\n\ntype CasePageState =\n  | { isLoaded: false }\n  | { isLoaded: true, error: object }\n  | { isLoaded: true, error: null, caseDetails: CaseDetails };\n\nclass CasePage extends React.Component<CasePageProps, CasePageState> {\n  constructor(props: CasePageProps) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n    };\n  }\n\n  componentDidMount() {\n    fetch(this.props.courtCase.detailsURL)\n      .then(res => res.json())\n      .then(\n        res => {\n          this.setState({ isLoaded: true, caseDetails: parseCaseDetails(res) });\n        },\n        error => {\n          this.setState({ isLoaded: true, error });\n        }\n      );\n  }\n\n  render() {\n    let body;\n    if (!this.state.isLoaded) {\n      body = <Spinner></Spinner>;\n    }\n    else if (this.state.error) {\n      body = <p>Error? {this.state.error}</p>;\n    }\n    else {\n      const dateDescriptionList = (label : string, date: any) : JSX.Element => date ?\n        <>\n          <dt className=\"col-sm-3\">{ label }</dt>\n          <dd className=\"col-sm-9\">{ formatDate(date) }</dd>\n        </> : <></>;\n\n      const { plaintiff, defendant, date_granted, \n              date_argued, date_decided, decision, judges } = this.state.caseDetails;\n\n      body = <>\n      <Container className=\"text-light bg-dark pt-4\" fluid>\n        <Container>\n          <Row className=\"justify-content-center\">\n            <h1 className=\"font-weight-bold\">\n              { plaintiff } <span className=\"font-weight-light font-italic text-muted\">v.</span> { defendant }\n            </h1>\n          </Row>\n          <Row className=\"mt-4\">\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\n              <Jumbotron className=\"text-dark\">\n                <dl className=\"row\">\n                  { dateDescriptionList('Date Accepted', date_granted) }\n                  { dateDescriptionList('Argued in Court', date_argued) }\n                  { date_decided ?\n                  <dd className=\"col-sm-12\">\n                    <p className=\"text-lead\">\n                      Decided on <span className=\"font-italic\">{ date_decided ? formatDate(date_decided) : '' }</span>\n                      { decision\n                        ? ` in favor of ${decision.winningParty} with a ${decision.majorityVote}-${decision.minorityVote} vote` \n                        : '' }.\n                    </p>\n                  </dd>\n                  : ''}\n                </dl>\n                <hr className=\"my-4\" />\n                <Row className=\"text-center\">\n                { judges.length > 0\n                  ? judges.map(j => j.renderPicture())\n                  : ''\n                }\n                </Row>\n              </Jumbotron>\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n      <Container className=\"text-dark bg-light pt-4\" fluid>\n        <Container>\n          <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\n            <Row className=\"justify-content-center\">\n              <h2 className=\"font-weight-bold\">\n                Issue under Consideration\n              </h2>\n            </Row>\n            <Row dangerouslySetInnerHTML={{__html: this.state.caseDetails.factsOfTheCase}}>\n            </Row>\n          </Col>\n        </Container>\n      </Container>\n      </>;\n    }\n\n\n    return <>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"#\">\n          <h4 className=\"display-4\">\n            Judge Judy\n          </h4>\n        </NavbarBrand>\n        <Nav className=\"mr-auto\" navbar></Nav>\n        <Form inline>\n          <InputGroup>\n            <Input className=\"form-control\" type=\"search\" name=\"search\" id=\"searchQuery\" placeholder=\"Search for case...\" />\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText>\n                <Octicon icon={Search} verticalAlign='middle' size='small'></Octicon>\n              </InputGroupText>\n            </InputGroupAddon>\n          </InputGroup>\n        </Form>\n      </Navbar>\n\n      {body}\n    </>;\n  }\n}\n\nfunction CasePageRouter() {\n  const { docketId } = useParams();\n  return <CasePage courtCase={casesById.get(docketId)} />\n}\n\n// {} types for both props and state so far...\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/cases/:docketId\">\n            <CasePageRouter />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
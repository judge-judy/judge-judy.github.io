{"version":3,"sources":["data/CourtCase.tsx","components/CaseCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CourtCase","docketNumber","title","date","detailsURL","description","plaintiff","defendant","indexOf","Error","split","this","CaseSummaryCard","courtCase","Card","body","CardTitle","tag","className","d","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","formatDate","Badge","color","CardText","to","cases","case_summaries","caseObject","details_url","push","docket_number","Date","getCases","HomePage","Container","id","fluid","Form","inline","Input","type","name","placeholder","Button","icon","Search","Row","Col","React","Component","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.76a9a389.chunk.js","sourcesContent":["import case_summaries from './case_summaries.json';\n\nexport default class CourtCase {\n    readonly plaintiff: string;\n    readonly defendant: string;\n\n    constructor(readonly docketNumber: string,\n                title: string,\n                readonly date: Date,\n                readonly detailsURL: string,\n                readonly description: string) {\n        if (title.indexOf(\" v. \") === -1) {\n            throw Error(\"Invalid title: \" + title);\n        }\n        [this.plaintiff, this.defendant] = title.split(\" v. \");\n    }\n}\n\nexport function getCases() : CourtCase[] {\n    const cases = [];\n\n    for (const caseObject of case_summaries) {\n        if (!caseObject.title || !caseObject.date || !caseObject.details_url || !caseObject.description) {\n            continue;\n        }\n        if (caseObject.title.indexOf(\" v. \") === -1) {\n            continue;\n        }\n        cases.push(new CourtCase(\n            caseObject.docket_number, caseObject.title, \n            new Date(caseObject.date), \n            caseObject.details_url, caseObject.description\n        ));\n    }\n\n    return cases;\n}\n","import React, { FunctionComponent } from 'react';\nimport { Card, CardTitle, CardText, Badge } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\nimport CourtCase from '../data/CourtCase';\n\ntype CaseSummaryProps = {\n    courtCase: CourtCase\n}\n\nconst formatDate = (d: Date) => {\n    const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d)\n    const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d)\n    const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d)\n    \n    return `${da} ${mo}, ${ye}`;\n}\n\nconst CaseSummaryCard: FunctionComponent<CaseSummaryProps> = ({courtCase} : CaseSummaryProps) => {\n    const {plaintiff, defendant, date, description, docketNumber} = courtCase;\n\n    return <Card body>\n        <CardTitle tag=\"h5\">\n            { plaintiff } <span className=\"font-weight-bold font-italic\">v.</span> { defendant }\n        </CardTitle>\n        <div className=\"clearfix mb-3\">\n            <span className=\"text-muted\">{ formatDate(date) }</span>\n            <Badge className=\"float-right\" color=\"secondary\">Civil Rights</Badge>\n        </div>\n        <CardText>\n            { description }\n        </CardText>\n        <Link to={`/cases/${docketNumber}`}>Read More...</Link>\n    </Card>;\n}\n\nexport default CaseSummaryCard;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch, Route\n} from \"react-router-dom\";\nimport {\n  Container, Row, Col,\n  Form, Input, Button\n} from \"reactstrap\";\nimport Octicon, { Search } from '@primer/octicons-react';\n\nimport { getCases } from './data/CourtCase';\nimport CaseSummaryCard from './components/CaseCard';\nimport './App.css';\n\n\nconst cases = getCases();\n\n\nclass HomePage extends React.Component<{}, {}> {\n  render() {\n    return <>\n      <Container id=\"header\" className=\"bg-light text-center py-5\" fluid>\n        <h1 className=\"display-1\">\n          Judge Judy\n          </h1>\n        <p className=\"text-muted lead\">The Supreme Court made accessible.</p>\n      </Container>\n\n      <Container id=\"home-search\" className=\"bg-dark text-center py-3\" fluid>\n        <p className=\"lead text-light\">\n          Search by issues, judges, parties, etc.\n        </p>\n        <Form className=\"justify-content-center\" inline>\n          <Input className=\"form-control mr-sm-2\" type=\"search\" name=\"search\" id=\"searchQuery\" placeholder=\"Search for case...\" />\n          <Button>Search <Octicon icon={Search} /></Button>\n        </Form>\n      </Container>\n\n      <Container>\n        <Row className=\"mt-3\">\n          <Col>\n            <h2>Cases awaiting Arguments</h2>\n            \n            <CaseSummaryCard courtCase={cases[0]} />\n          </Col>\n          <Col>\n            <h2>Cases by Topic</h2>\n          </Col>\n        </Row>\n      </Container>\n    </>;\n  }\n}\n\n// {} types for both props and state so far...\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}